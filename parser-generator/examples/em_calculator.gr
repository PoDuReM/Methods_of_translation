âœ‹: add_sub;

add_sub ğŸ¤¯ [int]:
    ğŸ¤” atom add_sub_cont{0}          { $val = $atom.val + $add_sub_cont.val; }
;

add_sub_cont ğŸ¤“[int a] ğŸ¤¯ [int]:
    ğŸ¤” ADD atom add_sub_cont{a + 1}  { $val = $atom.val + $add_sub_cont.val; std::cout << a << std::endl; }
    ğŸ¤” SUB atom add_sub_cont{a + 1}  { $val = -$atom.val + $add_sub_cont.val; std::cout << a << std::endl; }
    ğŸ¤”                               { $val = 0; std::cout << a << std::endl; }
;

mul ğŸ¤¯[int]:
    ğŸ¤” atom mul_pow_cont{$atom.val}          { $val = $mul_pow_cont.val; }
;

mul_cont ğŸ¤“[int a] ğŸ¤¯ [int]:
    ğŸ¤” MUL atom mul_pow_cont{a + 1}  { $val = $atom.val + $add_sub_cont.val; std::cout << a << std::endl; }
    ğŸ¤”                               { $val = 0; std::cout << a << std::endl; }
;

pow ğŸ¤¯[int]:
    ğŸ¤” atom pow_cont{$atom.val}          { $val = $mul_pow_cont.val; }
;

pow_cont ğŸ¤“[int a, int b] ğŸ¤¯ [int]:
    ğŸ¤” MUL atom mul_pow_cont{a + 1}  { $val = $atom.val + $add_sub_cont.val; std::cout << a << std::endl; }
    ğŸ¤”                               { $val = 0; std::cout << a << std::endl; }
;

atom ğŸ¤¯ [int]:
    ğŸ¤” OPEN add_sub CLOSE            { $val = $add_sub.val; }
    ğŸ¤” NUM                           { $val = std::stoi($NUM.val); }
;

ADD: "\\+";
SUB: "\\-";
MUL: "\\*";
POW: "\\^";
OPEN: "\\(";
CLOSE: "\\)";
NUM: "\\d+";

ğŸ‘‰: ' ' '\t' '\n' '\r';
